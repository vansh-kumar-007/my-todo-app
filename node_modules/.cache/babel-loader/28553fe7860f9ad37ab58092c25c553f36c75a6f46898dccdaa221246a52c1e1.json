{"ast":null,"code":"var _jsxFileName = \"/home/vansh/my-todo-app/src/ToDoList.js\",\n  _s = $RefreshSig$();\n// ...existing imports...\nimport React, { useEffect, useState } from 'react';\nimport { db, auth } from './firebase';\nimport { collection, addDoc, deleteDoc, doc, onSnapshot, query, where, orderBy, updateDoc } from 'firebase/firestore';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction ToDoList() {\n  _s();\n  // ...existing state...\n  const [tasks, setTasks] = useState([]);\n  const [input, setInput] = useState('');\n  const [smartInput, setSmartInput] = useState('');\n  const [parsing, setParsing] = useState(false);\n  const user = auth.currentUser;\n\n  // ...existing useEffect for tasks...\n\n  // --- New: Smart Add Handler ---\n  const handleSmartAdd = async e => {\n    e.preventDefault();\n    if (!smartInput.trim()) return;\n    setParsing(true);\n\n    // Call your backend (or OpenAI API directly) here\n    // For now, we'll just add it as a normal task (we'll add AI step next)\n    const parsed = await mockParseTask(smartInput); // Replace with real API call later\n\n    await addDoc(collection(db, 'tasks'), {\n      text: parsed.text,\n      uid: user.uid,\n      createdAt: new Date(parsed.dueDate || Date.now()),\n      completed: false,\n      dueDate: parsed.dueDate || null\n    });\n    setSmartInput('');\n    setParsing(false);\n  };\n\n  // Mock AI parser (replace this with your real API later)\n  async function mockParseTask(text) {\n    // Very basic fake logic for demo\n    return {\n      text: text,\n      dueDate: null\n    };\n  }\n\n  // ...existing handlers...\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSmartAdd,\n      style: {\n        marginBottom: 8\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        value: smartInput,\n        onChange: e => setSmartInput(e.target.value),\n        placeholder: \"Try: 'Remind me to call mom next Monday at 8pm'\",\n        style: {\n          width: '70%',\n          padding: 8\n        },\n        disabled: parsing\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        style: {\n          padding: 8,\n          marginLeft: 8\n        },\n        disabled: parsing,\n        children: parsing ? 'Parsing...' : 'Smart Add'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 72,\n    columnNumber: 5\n  }, this);\n}\n_s(ToDoList, \"2HEiMl0eyIrvp531SQAaFdmUR/0=\");\n_c = ToDoList;\nexport default ToDoList;\nvar _c;\n$RefreshReg$(_c, \"ToDoList\");","map":{"version":3,"names":["React","useEffect","useState","db","auth","collection","addDoc","deleteDoc","doc","onSnapshot","query","where","orderBy","updateDoc","jsxDEV","_jsxDEV","ToDoList","_s","tasks","setTasks","input","setInput","smartInput","setSmartInput","parsing","setParsing","user","currentUser","handleSmartAdd","e","preventDefault","trim","parsed","mockParseTask","text","uid","createdAt","Date","dueDate","now","completed","children","onSubmit","style","marginBottom","value","onChange","target","placeholder","width","padding","disabled","fileName","_jsxFileName","lineNumber","columnNumber","type","marginLeft","_c","$RefreshReg$"],"sources":["/home/vansh/my-todo-app/src/ToDoList.js"],"sourcesContent":["// ...existing imports...\nimport React, { useEffect, useState } from 'react';\nimport { db, auth } from './firebase';\nimport {\n  collection,\n  addDoc,\n  deleteDoc,\n  doc,\n  onSnapshot,\n  query,\n  where,\n  orderBy,\n  updateDoc,\n} from 'firebase/firestore';\n\n\n\n\n\n\nfunction ToDoList() {\n  // ...existing state...\n  const [tasks, setTasks] = useState([]);\n  const [input, setInput] = useState('');\n  const [smartInput, setSmartInput] = useState('');\n  const [parsing, setParsing] = useState(false);\n\n  const user = auth.currentUser;\n\n\n\n\n\n\n  \n\n  // ...existing useEffect for tasks...\n\n  // --- New: Smart Add Handler ---\n  const handleSmartAdd = async (e) => {\n    e.preventDefault();\n    if (!smartInput.trim()) return;\n    setParsing(true);\n\n    // Call your backend (or OpenAI API directly) here\n    // For now, we'll just add it as a normal task (we'll add AI step next)\n    const parsed = await mockParseTask(smartInput); // Replace with real API call later\n\n    await addDoc(collection(db, 'tasks'), {\n      text: parsed.text,\n      uid: user.uid,\n      createdAt: new Date(parsed.dueDate || Date.now()),\n      completed: false,\n      dueDate: parsed.dueDate || null,\n    });\n    setSmartInput('');\n    setParsing(false);\n  };\n\n  // Mock AI parser (replace this with your real API later)\n  async function mockParseTask(text) {\n    // Very basic fake logic for demo\n    return {\n      text: text,\n      dueDate: null,\n    };\n  }\n\n  // ...existing handlers...\n\n  return (\n    <div>\n      {/* --- New Smart Add UI --- */}\n      <form onSubmit={handleSmartAdd} style={{ marginBottom: 8 }}>\n        <input\n          value={smartInput}\n          onChange={e => setSmartInput(e.target.value)}\n          placeholder=\"Try: 'Remind me to call mom next Monday at 8pm'\"\n          style={{ width: '70%', padding: 8 }}\n          disabled={parsing}\n        />\n        <button type=\"submit\" style={{ padding: 8, marginLeft: 8 }} disabled={parsing}>\n          {parsing ? 'Parsing...' : 'Smart Add'}\n        </button>\n      </form>\n\n      {/* ...existing Add Task form and task list below ... */}\n      {/* keep your previous code here */}\n    </div>\n  );\n}\n\nexport default ToDoList;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}